{"version":3,"sources":["components/Title.js","firebase/config.js","hooks/useStorage.js","components/ProgressBar.js","components/UploadForm.js","hooks/useFirestore.js","components/ImageGrid.js","components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useStorage","image","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","precentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setImage","console","log","div","initial","width","animate","UploadForm","types","type","onChange","e","selected","target","files","includes","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelected","map","key","onClick","layout","whileHover","opacity","img","src","alt","transition","delay","Modal","classList","contains","y","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.15f5a878.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div className=\"title\">\r\n      <h1>Fire Imgzella</h1>\r\n      <h2>Your Pictures</h2>\r\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Title;","import * as firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBEjhtvpgDjLE-FYqg1nOg1JgwQPz1AUag\",\r\n    authDomain: \"fire-imgzella.firebaseapp.com\",\r\n    databaseURL: \"https://fire-imgzella.firebaseio.com\",\r\n    projectId: \"fire-imgzella\",\r\n    storageBucket: \"fire-imgzella.appspot.com\",\r\n    messagingSenderId: \"147440191239\",\r\n    appId: \"1:147440191239:web:0387025f26e7c4633be7a2\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport {projectStorage,projectFirestore,timestamp};\r\n\r\n","import {useState,useEffect} from 'react';\r\nimport {projectStorage,projectFirestore,timestamp} from '../firebase/config';\r\n\r\nconst useStorage = (image)=>{\r\n    const [progress,setProgress] = useState(0);\r\n    const [error,setError] = useState(null);\r\n    const [url,setUrl] = useState(null);\r\n    \r\n    useEffect(()=>{\r\n        const storageRef = projectStorage.ref(image.name);\r\n        const collectionRef = projectFirestore.collection('images');\r\n        storageRef.put(image).on('state_changed',(snap)=>{\r\n            let precentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(precentage);\r\n        },(err)=>{\r\n            setError(err);\r\n        },async()=>{\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timestamp();\r\n            collectionRef.add({url,createdAt});\r\n            setUrl(url);\r\n        })\r\n\r\n    },[image]);\r\n\r\n    return {progress,error,url};\r\n};\r\n\r\nexport default useStorage;","import React, { useEffect } from 'react';\r\nimport useStorage from '../hooks/useStorage';\r\nimport {motion} from 'framer-motion';\r\n\r\n\r\n\r\nconst ProgressBar = ({image,setImage}) => {\r\n  const { url , progress} = useStorage(image);\r\n  console.log(progress,url);\r\n  useEffect(()=>{\r\n    if(url){\r\n      setImage(null)\r\n    }\r\n  },[url,setImage])\r\n  return (\r\n    <motion.div className=\"progress-bar\" initial={{width:0}} animate={{width:progress + '%'}}></motion.div>\r\n    \r\n  );\r\n} \r\n\r\nexport default ProgressBar;","import React, { useState } from 'react';\r\nimport ProgressBar from './ProgressBar';\r\n\r\nconst UploadForm = () => {\r\n  const [image,setImage] = useState(null);\r\n  const [error,setError] = useState(null);\r\n  const types = ['image/png','image/jpeg'];\r\n  const onChange = (e)=>{\r\n    let selected = e.target.files[0];\r\n    if(selected && types.includes(selected.type)){\r\n      setImage(selected);\r\n      setError('');\r\n    } else {\r\n      setError('Please upload an image file type PNG or JPEG');\r\n    }\r\n    \r\n  }\r\n  return (\r\n    <form>\r\n      <label>\r\n        <input type=\"file\" onChange={onChange} />\r\n        <span>+</span>\r\n      </label>\r\n      <div className=\"output\">\r\n        { image && <div>{image.name}</div> }\r\n        { error && <div className=\"error\">{error}</div> }\r\n        {image && <ProgressBar image={image} setImage={setImage} /> }\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default UploadForm;","import {useState,useEffect} from 'react';\r\nimport {projectFirestore} from '../firebase/config';\r\n\r\nconst useFirestore =(collection)=>{\r\n    const [docs,setDocs] = useState([]);\r\n    useEffect(()=>{\r\n        const unsub = projectFirestore.collection(collection).orderBy('createdAt','desc').onSnapshot((snap)=>{\r\n            let documents =[];\r\n            snap.forEach(doc=>{\r\n                documents.push({...doc.data() , id:doc.id})\r\n            });\r\n            setDocs(documents)\r\n        });\r\n        return ()=> unsub();\r\n    },[collection]);\r\n    return {docs};\r\n}\r\n\r\nexport default useFirestore;","import React from 'react';\r\nimport useFirestore from '../hooks/useFirestore';\r\nimport {motion} from 'framer-motion';\r\n\r\n\r\nconst ImageGrid = ({setSelected}) => {\r\n  const {docs} = useFirestore('images');\r\n  return (\r\n    <div className=\"img-grid\">\r\n      {docs && docs.map(doc=>{\r\n        return (\r\n          <motion.div className=\"img-wrap\" key={doc.id} onClick={()=>setSelected(doc.url)} layout whileHover={{opacity:1}}>\r\n            <motion.img src={doc.url} alt=\"uploaded image\" initial={{opacity:0}} animate={{opacity:1}} transition={{delay:1}}/>\r\n          </motion.div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImageGrid;","import React from 'react';\r\nimport {motion} from 'framer-motion';\r\n\r\nconst Modal = ({selected,setSelected}) => {\r\n  const handleClose =(e)=>{\r\n    if(e.target.classList.contains('backdrop')){\r\n      setSelected(null);\r\n    }\r\n    \r\n  };\r\n  return (\r\n    <motion.div className=\"backdrop\" onClick={handleClose} initial={{opacity:0}} animate={{opacity:1}}>\r\n      <motion.img src={selected} alt=\"enlarged pic\" initial={{y:\"-100vh\"}} animate={{y:0}}/>\r\n    </motion.div>\r\n  )\r\n}\r\n\r\nexport default Modal;","import React, { useState } from 'react';\nimport Title from './components/Title';\nimport UploadForm from './components/UploadForm';\nimport ImageGrid from './components/ImageGrid';\nimport Modal from './components/Modal';\n\nfunction App() {\n  const [selected,setSelected] = useState(null);\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid setSelected={setSelected} />\n      { selected && <Modal selected={selected} setSelected={setSelected} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}